// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Meridian_Algo

//@version=6
indicator("Quantum RSI [Q-Meridian]", shorttitle="Quantum RSI [Q-Meridian]", overlay=false)

// --- Input Groups ---
group_rsi = "📊 RSI Settings"
group_threshold = "🔧 Threshold Settings"
group_visual = "🎨 Visual Settings"
group_table = "📊 Table Settings"

// --- RSI Inputs ---
minLength = input.int(2, "Minimum RSI Length", minval=1, maxval=30, group=group_rsi, tooltip="Minimum length for adaptive RSI calculation.")
maxLength = input.int(60, "Maximum RSI Length", minval=5, maxval=60, group=group_rsi, tooltip="Maximum length for adaptive RSI calculation.")
dmiPeriod = input.int(14, "DMI Period", minval=1, group=group_rsi, tooltip="Period for DMI calculation to determine volatility.")
adxWeight = input.float(0.6, "ADX Weight", minval=0, maxval=1, step=0.1, group=group_rsi, tooltip="Weight of ADX in volatility score.")
diWeight = input.float(0.4, "DI Change Weight", minval=0, maxval=1, step=0.1, group=group_rsi, tooltip="Weight of DI change in volatility score.")
useAdjustmentMultiplier = input.bool(true, "Use Timeframe Adjustment", group=group_rsi, tooltip="Adjust RSI length based on timeframe.")
useAdaptiveLength = input.bool(true, "Use Adaptive RSI Length", group=group_rsi, tooltip="Use adaptive RSI length based on volatility.")
fixedRsiLength = input.int(14, "Fixed RSI Length", minval=1, maxval=60, group=group_rsi, tooltip="Fixed RSI length if adaptive length is disabled.")

// --- Threshold Inputs ---
thresholdPeriod = input.int(100, "Threshold Calculation Period", minval=10, group=group_threshold, tooltip="Period for calculating adaptive thresholds.")
thresholdPercentile = input.float(10, "Percentile for Thresholds", minval=1, maxval=49, group=group_threshold, tooltip="Percentile for determining overbought/oversold levels.")
smoothPeriod = input.int(5, "Threshold Smoothing Period", minval=1, group=group_threshold, tooltip="Smoothing period for adaptive thresholds.")
useAdaptiveThresholds = input.bool(true, "Use Adaptive Thresholds", group=group_threshold, tooltip="Use adaptive overbought/oversold thresholds.")
fixedOverbought = input.float(70, "Fixed Overbought Level", minval=50, maxval=100, group=group_threshold, tooltip="Fixed overbought level if adaptive thresholds are disabled.")
fixedOversold = input.float(30, "Fixed Oversold Level", minval=0, maxval=50, group=group_threshold, tooltip="Fixed oversold level if adaptive thresholds are disabled.")

// --- Visual Inputs ---
rsiGradientStart = input.color(#00bcd4, "RSI Gradient Start", group=group_visual, tooltip="Gradient start color for RSI line (oversold).")
rsiGradientMid = input.color(#5b9cf6, "RSI Gradient Mid", group=group_visual, tooltip="Gradient middle color for RSI line (midline).")
rsiGradientEnd = input.color(#b39ddb, "RSI Gradient End", group=group_visual, tooltip="Gradient end color for RSI line (overbought).")
shadowColorOB = input.color(color.new(color.red, 80), "Overbought Shadow", group=group_visual, tooltip="Color for overbought shadow fill.")
shadowColorOS = input.color(color.new(color.green, 80), "Oversold Shadow", group=group_visual, tooltip="Color for oversold shadow fill.")
showRsiLine = input.bool(true, "Show RSI Line", group=group_visual, tooltip="Toggle visibility of the RSI line.")
showThresholds = input.bool(true, "Show Thresholds", group=group_visual, tooltip="Toggle visibility of overbought/oversold thresholds.")
showMidline = input.bool(true, "Show Midline", group=group_visual, tooltip="Toggle visibility of the midline.")
showShadows = input.bool(true, "Show Shadows", group=group_visual, tooltip="Toggle visibility of overbought/oversold shadow fills.")
rsi_linewidth = input.int(2, "RSI Line Width", minval=1, maxval=10, group=group_visual, tooltip="Width of the RSI line.")

// --- Table Settings ---
table_position = input.string("Top Right", "Table Position", options=["Top Right", "Top Left", "Bottom Right", "Bottom Left"], group=group_table)
table_size = input.string("Normal", "Table Size", options=["Small", "Normal", "Large"], group=group_table)
table_transparency = input.int(10, "Table Transparency", minval=0, maxval=100, group=group_table)
table_bg_color = input.color(color.rgb(15, 15, 23, 85), "Table Background", group=group_table)
table_border_color = input.color(color.rgb(30, 30, 45, 85), "Table Border", group=group_table)
table_header_bg = input.color(color.rgb(25, 25, 35, 95), "Header Background", group=group_table)
table_header_text = input.color(color.rgb(240, 240, 240), "Header Text", group=group_table)
table_label_text = input.color(color.rgb(180, 180, 200), "Label Text", group=group_table)
table_value_text = input.color(color.rgb(255, 255, 255), "Value Text", group=group_table)
show_table = input.bool(true, "Show Information Table", group=group_table)
show_performance = input.bool(true, "Show Performance Metrics", group=group_table)

// --- DMI and Volatility Calculations ---
// Calculate DMI components
[diplus, diminus, adx] = ta.dmi(dmiPeriod, dmiPeriod)
diplus := na(diplus) ? 0 : diplus
diminus := na(diminus) ? 0 : diminus
adx := na(adx) ? 0 : adx

// Calculate DMI strength and volatility
dmiStrength = math.abs(diplus - diminus) / (diplus + diminus + 0.000001)
adxNorm = adx / 50
dmiDelta = ta.change(dmiStrength, 1)
dmiDelta := na(dmiDelta) ? 0 : dmiDelta
dmiVolatility = ta.sma(math.abs(dmiDelta), dmiPeriod) * 10
dmiVolatility := na(dmiVolatility) ? 0 : dmiVolatility

// Combined volatility score
volatilityScore = (adxNorm * adxWeight) + (dmiVolatility * diWeight)
volatilityScore := na(volatilityScore) ? 0 : volatilityScore

// --- Timeframe Adjustment ---
tfAdjustment = 1.0
if useAdjustmentMultiplier
    if timeframe.isintraday
        if timeframe.isminutes
            mins = timeframe.multiplier
            if mins <= 5
                tfAdjustment := 1.2
            else if mins <= 15
                tfAdjustment := 1.1
            else if mins <= 60
                tfAdjustment := 1.0
            else
                tfAdjustment := 0.9
        else
            tfAdjustment := 1.3
    else
        if timeframe.isdaily
            tfAdjustment := 0.8
        else if timeframe.isweekly
            tfAdjustment := 0.7
        else if timeframe.ismonthly
            tfAdjustment := 0.6
        else
            tfAdjustment := 0.75

// --- Adaptive RSI Length ---
volatilityAdjustment = 1 - math.min(volatilityScore, 1)
rawLength = minLength + ((maxLength - minLength) * volatilityAdjustment)
adaptiveLength = math.round(rawLength * tfAdjustment)
lengthToUse = useAdaptiveLength ? math.max(math.min(math.round(na(adaptiveLength) ? minLength : adaptiveLength), maxLength), minLength) : fixedRsiLength

// --- RSI Calculation ---
upMove = ta.change(close)
downMove = -upMove
upMove := upMove > 0 ? upMove : 0
downMove := downMove > 0 ? downMove : 0
avgUp = 0.0
avgDown = 0.0
firstAvgUp = ta.sma(upMove, lengthToUse)
firstAvgDown = ta.sma(downMove, lengthToUse)
avgUp := na(avgUp[1]) ? firstAvgUp : (avgUp[1] * (lengthToUse - 1) + upMove) / lengthToUse
avgDown := na(avgDown[1]) ? firstAvgDown : (avgDown[1] * (lengthToUse - 1) + downMove) / lengthToUse
rs = avgUp / (avgDown + 0.000001)
adaptiveRsi = 100 - (100 / (1 + rs))

// --- Adaptive Thresholds ---
var rsiHistory = array.new_float(0)
if bar_index > 0
    array.push(rsiHistory, adaptiveRsi[1])
    if array.size(rsiHistory) > thresholdPeriod
        array.shift(rsiHistory)
oversoldRaw = array.size(rsiHistory) > 0 ? array.percentile_nearest_rank(rsiHistory, thresholdPercentile) : 30
overboughtRaw = array.size(rsiHistory) > 0 ? array.percentile_nearest_rank(rsiHistory, 100 - thresholdPercentile) : 70
oversoldThreshold = useAdaptiveThresholds ? ta.sma(oversoldRaw, smoothPeriod) : fixedOversold
overboughtThreshold = useAdaptiveThresholds ? ta.sma(overboughtRaw, smoothPeriod) : fixedOverbought

// Calculate dynamic midline
midlineLevel = (overboughtThreshold + oversoldThreshold) / 2

// --- Color Logic ---
// Gradient color for RSI line
rsiColor = adaptiveRsi < midlineLevel ? color.from_gradient(adaptiveRsi, oversoldThreshold, midlineLevel, rsiGradientStart, rsiGradientMid) : adaptiveRsi > midlineLevel ? color.from_gradient(adaptiveRsi, midlineLevel, overboughtThreshold, rsiGradientMid, rsiGradientEnd) : rsiGradientMid

// --- Plotting ---
// Initial plots with display set to none for fills
rsiPlot = plot(showRsiLine ? adaptiveRsi : na, "Adaptive RSI", color=rsiColor, linewidth=rsi_linewidth, display=display.none)
overboughtPlot = plot(showThresholds ? overboughtThreshold : na, "Overbought", color=color.rgb(255, 82, 82, 50), style=plot.style_linebr, display=display.none)
oversoldPlot = plot(showThresholds ? oversoldThreshold : na, "Oversold", color=color.rgb(76, 175, 80, 50), style=plot.style_linebr, display=display.none)
midlinePlot = plot(showMidline ? midlineLevel : na, "Midline", color=color.rgb(156, 156, 156, 50), style=plot.style_line, display=display.none)

// Add shadow fills between RSI and thresholds
fill(rsiPlot, overboughtPlot, color=showShadows and adaptiveRsi > overboughtThreshold ? shadowColorOB : na, title="Overbought Shadow Fill")
fill(rsiPlot, oversoldPlot, color=showShadows and adaptiveRsi < oversoldThreshold ? shadowColorOS : na, title="Oversold Shadow Fill")

// Replot visible lines
plot(showRsiLine ? adaptiveRsi : na, "Adaptive RSI", color=rsiColor, linewidth=rsi_linewidth)
plot(showThresholds ? overboughtThreshold : na, "Overbought", color=color.rgb(255, 82, 82, 50), style=plot.style_linebr)
plot(showThresholds ? oversoldThreshold : na, "Oversold", color=color.rgb(76, 175, 80, 50), style=plot.style_linebr)
plot(showMidline ? midlineLevel : na, "Midline", color=color.rgb(156, 156, 156, 50), style=plot.style_line)

// --- Table Creation and Styling ---
if show_table
    // Calculate dynamic table size
    font_size = table_size == "Small" ? size.small : table_size == "Large" ? size.large : size.normal

    // Performance metrics
    var float prev_rsi = 0.0
    rsi_change = ((adaptiveRsi - prev_rsi) / prev_rsi) * 100
    prev_rsi := adaptiveRsi

    // Determine table position
    var table_pos = position.top_right
    if table_position == "Top Left"
        table_pos := position.top_left
    else if table_position == "Bottom Right"
        table_pos := position.bottom_right
    else if table_position == "Bottom Left"
        table_pos := position.bottom_left

    // Create and format table
    var table infoTable = table.new(table_pos, 2, show_performance ? 8 : 7, border_color=table_border_color, border_width=1, bgcolor=color.new(table_bg_color, table_transparency))

    // Table title with gradient style
    table.cell(infoTable, 0, 0, "⚛ Quantum RSI", text_color=table_header_text, text_size=font_size, bgcolor=table_header_bg, text_halign=text.align_center)
    table.cell(infoTable, 1, 0, "Analysis", text_color=table_header_text, text_size=font_size, bgcolor=table_header_bg, text_halign=text.align_center)

    // Row 1: RSI Length with icon
    table.cell(infoTable, 0, 1, "📏 RSI Length", text_color=table_label_text, text_size=font_size)
    table.cell(infoTable, 1, 1, str.tostring(lengthToUse), text_color=table_value_text, text_size=font_size, bgcolor=color.new(color.rgb(40, 40, 60, 90), 0))

    // Row 2: Vol Score with custom coloring
    table.cell(infoTable, 0, 2, "🎯 Vol Score", text_color=table_label_text, text_size=font_size)
    volScoreVal = math.round(volatilityScore * 100) / 100
    volScoreColor = volScoreVal > 0.5 ? color.rgb(76, 175, 80) : volScoreVal < 0.2 ? color.rgb(239, 83, 80) : color.rgb(255, 193, 7)
    table.cell(infoTable, 1, 2, str.tostring(volScoreVal, "#.##"), text_color=volScoreColor, text_size=font_size, bgcolor=color.new(color.rgb(40, 40, 60, 90), 0))

    // Row 3: Adaptive RSI
    table.cell(infoTable, 0, 3, "📈 Adaptive RSI", text_color=table_label_text, text_size=font_size)
    table.cell(infoTable, 1, 3, str.tostring(math.round(adaptiveRsi * 100) / 100, "#.##"), text_color=table_value_text, text_size=font_size, bgcolor=color.new(color.rgb(40, 40, 60, 90), 0))

    // Row 4: Oversold
    table.cell(infoTable, 0, 4, "⬇ Oversold", text_color=table_label_text, text_size=font_size)
    table.cell(infoTable, 1, 4, str.tostring(math.round(oversoldThreshold * 100) / 100, "#.##"), text_color=color.rgb(76, 175, 80), text_size=font_size, bgcolor=color.new(color.rgb(40, 40, 60, 90), 0))

    // Row 5: Overbought
    table.cell(infoTable, 0, 5, "⬆ Overbought", text_color=table_label_text, text_size=font_size)
    table.cell(infoTable, 1, 5, str.tostring(math.round(overboughtThreshold * 100) / 100, "#.##"), text_color=color.rgb(239, 83, 80), text_size=font_size, bgcolor=color.new(color.rgb(40, 40, 60, 90), 0))

    // Row 6: Signal with dynamic styling
    table.cell(infoTable, 0, 6, "🚦 Signal", text_color=table_label_text, text_size=font_size)
    signal = adaptiveRsi < oversoldThreshold ? "Buy" : adaptiveRsi > overboughtThreshold ? "Sell" : "Hold"
    signalIcon = signal == "Buy" ? "🔼 " : signal == "Sell" ? "🔽 " : "◼ "
    signalColor = signal == "Buy" ? color.rgb(76, 175, 80) : signal == "Sell" ? color.rgb(239, 83, 80) : color.rgb(158, 158, 158)
    table.cell(infoTable, 1, 6, signalIcon + signal, text_color=signalColor, text_size=font_size, bgcolor=color.new(color.rgb(40, 40, 60, 90), 0))

    // Row 7: Performance metrics (optional)
    if show_performance
        table.cell(infoTable, 0, 7, "💹 Change", text_color=table_label_text, text_size=font_size)
        changeColor = rsi_change > 0 ? color.rgb(76, 175, 80) : rsi_change < 0 ? color.rgb(239, 83, 80) : color.rgb(158, 158, 158)
        changeIcon = rsi_change > 0 ? "△ " : rsi_change < 0 ? "▽ " : "○ "
        table.cell(infoTable, 1, 7, changeIcon + str.tostring(rsi_change, "#.##") + "%", text_color=changeColor, text_size=font_size, bgcolor=color.new(color.rgb(40, 40, 60, 90), 0))
