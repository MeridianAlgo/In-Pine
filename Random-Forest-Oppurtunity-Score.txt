// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Meridian_Algo
// Best to be used with our Quantam MA code!!!
//@version=5
indicator("Random Forest-Inspired Opportunity Score", overlay=true, max_labels_count=500)

// --- Input Parameters ---
length_rsi = input.int(14, "RSI Length", minval=1)
length_macd_fast = input.int(12, "MACD Fast Length", minval=1)
length_macd_slow = input.int(26, "MACD Slow Length", minval=1)
length_macd_signal = input.int(9, "MACD Signal Length", minval=1)
length_bb = input.int(20, "Bollinger Bands Length", minval=1)
mult_bb = input.float(2.0, "Bollinger Bands Multiplier", minval=0.1, step=0.1)
length_vol = input.int(20, "Volume MA Length", minval=1)
num_trees = input.int(5, "Number of Trees", minval=1, maxval=10)  // Number of rule sets
buy_threshold = input.float(0.6, "Buy Score Threshold", minval=0, maxval=1, step=0.05)
sell_threshold = input.float(0.4, "Sell Score Threshold", minval=0, maxval=1, step=0.05)

// --- Helper Function: Generate Random Threshold ---
f_random_threshold(base, variation) =>
    base + variation * (math.random(-1, 1) / 10)

// --- Feature Calculations ---
// RSI
rsi = ta.rsi(close, length_rsi)
rsi_overbought = 70
rsi_oversold = 30

// MACD
[macd_line, signal_line, _] = ta.macd(close, length_macd_fast, length_macd_slow, length_macd_signal)
macd_diff = macd_line - signal_line

// Bollinger Bands
[basis, upper, lower] = ta.bb(close, length_bb, mult_bb)
bb_position = (close - basis) / (upper - lower + 1e-10)

// Volume
vol = volume
vol_ma = ta.sma(vol, length_vol)
vol_ratio = vol / (vol_ma + 1e-10)

// --- Decision Tree-Like Rules (Multiple "Trees") ---
var float total_score = 0
var float[] votes = array.new_float(num_trees, 0)
var float[] weights = array.new_float(num_trees, 1.0 / num_trees)  // Equal weights for simplicity

for i = 0 to num_trees - 1
    // Randomize thresholds to simulate tree diversity
    rsi_ob = f_random_threshold(rsi_overbought, 5)
    rsi_os = f_random_threshold(rsi_oversold, 5)
    macd_threshold = f_random_threshold(0, 0.1)
    bb_high = f_random_threshold(0.5, 0.2)
    bb_low = f_random_threshold(-0.5, 0.2)
    vol_threshold = f_random_threshold(1.5, 0.3)

    // Rule Set (Decision Tree)
    vote = 0.0
    // RSI Rules
    if rsi < rsi_os
        vote := vote + 1  // Bullish (oversold)
    else if rsi > rsi_ob
        vote := vote - 1  // Bearish (overbought)

    // MACD Rules
    if macd_diff > macd_threshold and ta.crossover(macd_line, signal_line)
        vote := vote + 1  // Bullish
    else if macd_diff < -macd_threshold and ta.crossunder(macd_line, signal_line)
        vote := vote - 1  // Bearish

    // Bollinger Bands Rules
    if bb_position < bb_low
        vote := vote + 1  // Bullish (near lower band)
    else if bb_position > bb_high
        vote := vote - 1  // Bearish (near upper band)

    // Volume Rules
    if vol_ratio > vol_threshold
        vote := vote + (rsi < rsi_ob ? 1 : -1)  // Confirm trend with volume

    // Store vote
    array.set(votes, i, vote)

// --- Aggregate Votes ---
total_score := 0
for i = 0 to num_trees - 1
    total_score := total_score + array.get(weights, i) * array.get(votes, i)

// Normalize score to [0,1]
score_max = float(num_trees)
score_min = -float(num_trees)
score_normalized = (total_score - score_min) / (score_max - score_min + 1e-10)

// --- Signal Logic ---
buy_signal = score_normalized > buy_threshold and ta.crossover(score_normalized, buy_threshold)
sell_signal = score_normalized < sell_threshold and ta.crossunder(score_normalized, sell_threshold)

// --- Plotting ---
// Plot the score
plot(score_normalized, title="Opportunity Score", color=color.blue, linewidth=2)

// Plot Buy/Sell Signals
plotshape(buy_signal, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(sell_signal, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

// --- Table Display ---
var table t = table.new(position.top_right, 2, 2, border_width=1)
if barstate.islast
    table.cell(t, 0, 0, "Opportunity Score", bgcolor=color.gray, text_color=color.white)
    table.cell(t, 1, 0, str.tostring(score_normalized, "#.##"), bgcolor=color.blue, text_color=color.white)
    table.cell(t, 0, 1, "Signal", bgcolor=color.gray, text_color=color.white)
    table.cell(t, 1, 1, buy_signal ? "BUY" : sell_signal ? "SELL" : "NEUTRAL", bgcolor=buy_signal ? color.green : sell_signal ? color.red : color.gray, text_color=color.white)

// --- Alerts ---
alertcondition(buy_signal, title="Buy Signal Alert", message="Buy Signal: Opportunity Score = {{score_normalized}}")
alertcondition(sell_signal, title="Sell Signal Alert", message="Sell Signal: Opportunity Score = {{score_normalized}}")
